snippet gitignore_tpl "gitignore template"
# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
node_modules

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# VSCODE 
.vscode

# JETBRAIN
.idea

dist
public/build
.DS_Store
endsnippet

snippet dockerignore_tpl "dockerignore template"
build/
dist/
docker/
node_modules/
uploads/
public/media/*
endsnippet

snippet docker_compose_yml "docker-compose.yml"
version: "2"

services:

  web:
    image: ${1:node}
    container_name: ${2:web-server}
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - db
    links:
      - db
    environment:
      - FOO=bar

  db:
    image: ${3:mongo}
    container_name: ${4:web-db}
    restart: unless-stopped
    volumes:
      - /data/mongodb/db:/data/db
endsnippet  

snippet drone_yml_node "drone.yml for node"
pipeline:
  build:
    image: node
    commands:
      - echo 'start build'
      - npm i && npm run build
      - echo 'finished'
  test:
    image: node
    commands:
      - echo 'start test'
      - npm test
      - echo 'finished'
  sonar:
    image: halsn/sonar-scanner
    commands:
      - echo 'sonar-scanner start'
      - sonar-scanner
      - echo 'finished'
endsnippet

snippet sonar_project_properties_node "sonar-project.properties for node"
sonar.host.url=http://${1:localhost}:9000
sonar.projectKey=${2:demo:key}
sonar.projectName=${3:demo}
sonar.projectVersion=1.0
 
sonar.sources=${4:src}
sonar.sourceEncoding=UTF-8
# 排除某些特定文件和文件夹
sonar.exclusions=node_modules/**/*,**/*.min.js
sonar.language=js

sonar.javascript.lcov.reportPaths=coverage/lcov.info
endsnippet

snippet babelrc_tpl "babel rc template"
{
  "presets": [
    "@babel/preset-env",
    "@babel/preset-react",
  ],
  "plugins": []
}
endsnippet

snippet no_bug "pray for no bug" b
┏┛ ┻━━━━━┛ ┻┓
┃　　　　　　 ┃
┃　　　━　　　┃
┃　┳┛　  ┗┳　┃
┃　　　　　　 ┃
┃　　　┻　　　┃
┃　　　　　　 ┃
┗━┓　　　┏━━━┛
  ┃　　　┃   神兽保佑
  ┃　　　┃   代码无BUG！
  ┃　　　┗━━━━━━━━━┓
  ┃                ┣┓
  ┃　　　　         ┏┛
  ┗━┓ ┓ ┏━━━┳ ┓ ┏━┛
    ┃ ┫ ┫   ┃ ┫ ┫
    ┗━┻━┛   ┗━┻━┛
endsnippet

snippet eslint_rc_tsx "eslint configuration for tsx project" 
// "@typescript-eslint/parser": "^5.43.0",
// "@typescript-eslint/eslint-plugin": "^5.43.0",
// "eslint": "^7.15.0",
// "eslint-config-prettier": "^8.5.0",
// "eslint-config-alloy": "3.7.4",
// "eslint-config-airbnb": "^18.2.1",
// "eslint-plugin-prettier": "^4.1.0",
// "eslint-plugin-babel": "^5.3.1",
// "eslint-plugin-import": "^2.22.1",
// "eslint-plugin-jsx-a11y": "^6.4.1",
// "eslint-plugin-react": "^7.21.5",
// "eslint-plugin-react-hooks": "4.1.0",
// "eslint-plugin-typescript": "^0.14.0",

module.exports = {
  env: {
    browser: true,
    commonjs: true,
    es6: true,
    node: true,
    jest: true,
  },
  parser: '@typescript-eslint/parser',
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:react/recommended',
    'plugin:prettier/recommended',
    'eslint-config-alloy/react',
  ],
  parserOptions: {
    ecmaFeatures: {
      experimentalObjectRestSpread: true,
      jsx: true,
    },
    sourceType: 'module',
  },
  plugins: ['react', 'import', 'jsx-a11y', 'react-hooks', 'prettier', 'babel'],
  globals: {
    ActiveXObject: false,
    describe: false,
    it: false,
    expect: false,
    jest: false,
    afterEach: false,
    beforeEach: false,
    React: false,
    jQuery: false,
    $: false,
  },
  rules: {
    indent: 'off',
    camelcase: 'warn',
    eqeqeq: 'error',
    semi: ['warn', 'always'],
    'require-atomic-updates': 'off',
    'max-nested-callbacks': ['error', 6],
    'no-undef': 'error',
    'no-tabs': 'warn',
    'no-console': ['warn', { allow: ['error'] }],
    'no-lone-blocks': 'error',
    'no-unused-vars': 'warn',
    'no-useless-escape': 'warn',
    'no-mixed-spaces-and-tabs': 'warn',
    'no-multi-spaces': 'warn',
    'no-new-func': 'warn',
    'no-multiple-empty-lines': 'off',
    'no-multi-assign': 'warn',
    'no-unreachable': 'warn',
    'react-hooks/rules-of-hooks': 'error',
    'react/jsx-key': 'error',
    'prettier/prettier': ['error', { singleQuote: true }],
    'linebreak-style': ['error', 'unix'],
    'no-case-declarations': 0,
    'no-param-reassign': 0,
    'no-underscore-dangle': 0,
    'no-useless-constructor': 0,
    'no-use-before-define': ['error', { functions: false, classes: false }],
    'no-restricted-syntax': 0,
    'no-unused-expressions': [
      'error',
      { allowShortCircuit: true, allowTernary: true },
    ],
    'no-plusplus': 0,
    'no-return-assign': 0,
    'no-script-url': 0,
    'no-extend-native': 0,
    'no-restricted-globals': 0,
    'no-nested-ternary': 0,
    'no-empty': 0,
    'no-void': 0,
    'no-bitwise': 0,
    'no-mixed-operators': 0,
    'consistent-return': 0,
    'one-var': 0,
    'prefer-promise-reject-errors': 0,
    'prefer-destructuring': 0,
    'global-require': 0,
    'guard-for-in': 0,
    'func-names': 0,
    strict: 0,
    radix: 0,
    'no-prototype-builtins': 0,
    'class-methods-use-this': 0,
    'import/no-dynamic-require': 0,
    'import/no-unresolved': 0,
    'import/extensions': 0,
    'import/no-extraneous-dependencies': 0,
    'import/prefer-default-export': 0,
    'react/no-danger': 0,
    'react/forbid-prop-types': 0,
    'react/prop-types': 0,
    'react/jsx-filename-extension': [
      1,
      { extensions: ['.js', '.jsx', 'ts', 'tsx'] },
    ],
    'react/sort-comp': 0,
    'react/no-did-update-set-state': 0,
    'react/prefer-stateless-function': 0,
    'react/jsx-closing-tag-location': 0,
    'react/jsx-no-bind': 0,
    'react/no-array-index-key': 0,
    'react/no-children-prop': 0,
    'react/no-did-mount-set-state': 0,
    'react/no-find-dom-node': 0,
    'react/default-props-match-prop-types': 0,
    'react/jsx-one-expression-per-line': 0,
    'jsx-a11y/anchor-is-valid': 0,
    'jsx-a11y/no-static-element-interactions': 0,
    'jsx-a11y/click-events-have-key-events': 0,
    'jsx-a11y/no-noninteractive-element-interactions': 0,
    'jsx-a11y/alt-text': 0,
    'jsx-a11y/label-has-for': 0,
    'jsx-a11y/label-has-associated-control': 0,
    'react/no-multi-comp': 0,
    'react/destructuring-assignment': 0,
    'react/no-access-state-in-setstate': 0,
    'react/button-has-type': 0,
    'react/require-default-props': 0,
    'react/jsx-wrap-multilines': 0,
    'react/no-render-return-value': 0,
    'react/jsx-props-no-spreading': 0,
    'array-callback-return': 0,
    'no-cond-assign': 0,
    '@typescript-eslint/explicit-function-return-type': 0,
    '@typescript-eslint/no-use-before-define': 0,
    '@typescript-eslint/no-var-requires': 0,
    '@typescript-eslint/no-empty-function': 0,
    'no-shadow': 0,
    'no-continue': 0,
    'no-loop-func': 0,
    'prefer-spread': 0,
  },
  overrides: [
    {
      files: ['**/*.ts', '**/*.tsx'],
      plugins: ['@typescript-eslint'],
      rules: {
        'no-use-before-define': 'off',
        '@typescript-eslint/no-use-before-define': ['error'],
      },
    },
  ],
};
endsnippet

snippet babel_rc_tsx "babel configuration for tsx project"
// "@babel/core": "^7.18.6",
// "@babel/eslint-parser": "^7.18.2",
// "@babel/plugin-proposal-class-properties": "7.10.4",
// "@babel/plugin-proposal-decorators": "7.10.5",
// "@babel/plugin-proposal-object-rest-spread": "7.11.0",
// "@babel/plugin-syntax-dynamic-import": "7.8.3",
// "@babel/plugin-transform-runtime": "7.11.0",
// "@babel/preset-env": "7.14.4",
// "@babel/preset-react": "7.10.4",
// "@babel/preset-typescript": "^7.18.6",
// "@babel/runtime": "^7.17.9",

module.exports = {
  presets: [
    [
      '@babel/preset-env',
      {
        // "useBuiltIns": "usage",
        // "corejs": 3,
        // "targets": "defaults",
        modules: false,
      },
    ],
    '@babel/preset-typescript',
    '@babel/preset-react',
  ],
  plugins: [
    '@babel/plugin-transform-runtime',
    '@babel/plugin-proposal-object-rest-spread',
    ['@babel/plugin-proposal-decorators', { legacy: true }],
    '@babel/plugin-syntax-dynamic-import',
    [
      'import',
      {
        libraryName: 'antd',
        style: 'css',
      },
    ],
    [
      'import',
      {
        libraryName: '@antd-design/icons',
        libraryDirectory: 'dist/icons',
        camel2DashComponentName: false,
      },
      '@antd-design/icons',
    ],
  ],
};
endsnippet
