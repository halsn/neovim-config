snippet vue_3d_pie_chart "3d pie chart in vue"
<script setup lang="ts">
import { ref, onMounted } from 'vue';
import 'echarts-gl';
const option: any = ref({});
let selectedIndex: any = '';
let hoveredIndex: any = '';
// 生成扇形的曲面参数方程，用于 series-surface.parametricEquation
function getParametricEquation(
  startRatio: any,
  endRatio: any,
  isSelected: any,
  isHovered: any,
  k: any,
  height: any
) {
  // 计算
  let midRatio = (startRatio + endRatio) / 2;

  let startRadian = startRatio * Math.PI * 2;
  let endRadian = endRatio * Math.PI * 2;
  let midRadian = midRatio * Math.PI * 2;

  // 如果只有一个扇形，则不实现选中效果。
  if (startRatio === 0 && endRatio === 1) {
    isSelected = false;
  }

  // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）
  k = typeof k !== 'undefined' ? k : 1 / 3;

  // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）
  let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;
  let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;

  // 计算高亮效果的放大比例（未高亮，则比例为 1）
  let hoverRate = isHovered ? 1.05 : 1;

  // 返回曲面参数方程
  return {
    u: {
      min: -Math.PI,
      max: Math.PI * 3,
      step: Math.PI / 32,
    },

    v: {
      min: 0,
      max: Math.PI * 2,
      step: Math.PI / 20,
    },

    x: function (u: any, v: any) {
      if (u < startRadian) {
        return (
          offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate
        );
      }
      if (u > endRadian) {
        return (
          offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate
        );
      }
      return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;
    },

    y: function (u: any, v: any) {
      if (u < startRadian) {
        return (
          offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate
        );
      }
      if (u > endRadian) {
        return (
          offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate
        );
      }
      return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;
    },

    z: function (u: any, v: any) {
      if (u < -Math.PI * 0.5) {
        return Math.sin(u);
      }
      if (u > Math.PI * 2.5) {
        return Math.sin(u);
      }
      return Math.sin(v) > 0 ? 1 * height : -1;
    },
  };
}
// 生成模拟 3D 饼图的配置项
function getPie3D(pieData: any, internalDiameterRatio: any) {
  let series = [];
  let sumValue = 0;
  let startValue = 0;
  let endValue = 0;
  let legendData = [];
  let k =
    typeof internalDiameterRatio !== 'undefined'
      ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)
      : 1 / 3;

  // 为每一个饼图数据，生成一个 series-surface 配置
  for (let i = 0; i < pieData.length; i++) {
    sumValue += pieData[i].value;

    let seriesItem: any = {
      name:
        typeof pieData[i].name === 'undefined' ? \`series${i}\` : pieData[i].name,
      type: 'surface',
      parametric: true,
      wireframe: {
        show: false,
      },
      pieData: pieData[i],
      pieStatus: {
        selected: false,
        hovered: false,
        k: k,
      },
    };

    if (typeof pieData[i].itemStyle != 'undefined') {
      let itemStyle: any = {};

      typeof pieData[i].itemStyle.color != 'undefined'
        ? (itemStyle.color = pieData[i].itemStyle.color)
        : null;
      typeof pieData[i].itemStyle.opacity != 'undefined'
        ? (itemStyle.opacity = pieData[i].itemStyle.opacity)
        : null;

      seriesItem.itemStyle = itemStyle;
    }
    series.push(seriesItem);
  }

  // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，
  // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。
  for (let i = 0; i < series.length; i++) {
    endValue = startValue + series[i].pieData.value;
    series[i].pieData.startRatio = startValue / sumValue;
    series[i].pieData.endRatio = endValue / sumValue;
    series[i].parametricEquation = getParametricEquation(
      series[i].pieData.startRatio,
      series[i].pieData.endRatio,
      false,
      false,
      k,
      // series[i].pieData.value // 饼图高度
      50
    );

    startValue = endValue;

    legendData.push(series[i].name);
  }

  // // 补充一个透明的圆环，用于支撑高亮功能的近似实现。
  // series.push({
  //   name: 'mouseoutSeries',
  //   type: 'surface',
  //   parametric: true,
  //   wireframe: {
  //     show: false,
  //   },
  //   itemStyle: {
  //     opacity: 0.1,
  //     color: '#E1E8EC',
  //   },
  //   parametricEquation: {
  //     u: {
  //       min: 0,
  //       max: Math.PI * 2,
  //       step: Math.PI / 20,
  //     },
  //     v: {
  //       min: 0,
  //       max: Math.PI,
  //       step: Math.PI / 20,
  //     },
  //     x: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.sin(u) + Math.sin(u)) / Math.PI) * 2;
  //     },
  //     y: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.cos(u) + Math.cos(u)) / Math.PI) * 2;
  //     },
  //     z: function (u: any, v: any) {
  //       return Math.cos(v) > 0 ? -0.5 : -5;
  //     },
  //   },
  // });

  // // 补充一个透明的圆环，用于支撑高亮功能的近似实现。
  // series.push({
  //   name: 'mouseoutSeries',
  //   type: 'surface',
  //   parametric: true,
  //   wireframe: {
  //     show: false,
  //   },
  //   itemStyle: {
  //     opacity: 0.1,
  //     color: '#E1E8EC',
  //   },
  //   parametricEquation: {
  //     u: {
  //       min: 0,
  //       max: Math.PI * 2,
  //       step: Math.PI / 20,
  //     },
  //     v: {
  //       min: 0,
  //       max: Math.PI,
  //       step: Math.PI / 20,
  //     },
  //     x: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.sin(u) + Math.sin(u)) / Math.PI) * 2;
  //     },
  //     y: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.cos(u) + Math.cos(u)) / Math.PI) * 2;
  //     },
  //     z: function (u: any, v: any) {
  //       return Math.cos(v) > 0 ? -5 : -7;
  //     },
  //   },
  // });
  // series.push({
  //   name: 'mouseoutSeries',
  //   type: 'surface',
  //   parametric: true,
  //   wireframe: {
  //     show: false,
  //   },
  //   itemStyle: {
  //     opacity: 0.1,
  //     color: '#E1E8EC',
  //   },
  //
  //   parametricEquation: {
  //     u: {
  //       min: 0,
  //       max: Math.PI * 2,
  //       step: Math.PI / 20,
  //     },
  //     v: {
  //       min: 0,
  //       max: Math.PI,
  //       step: Math.PI / 20,
  //     },
  //     x: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.sin(u) + Math.sin(u)) / Math.PI) * 2.2;
  //     },
  //     y: function (u: any, v: any) {
  //       return ((Math.sin(v) * Math.cos(u) + Math.cos(u)) / Math.PI) * 2.2;
  //     },
  //     z: function (u: any, v: any) {
  //       return Math.cos(v) > 0 ? -7 : -7;
  //     },
  //   },
  // });
  return series;
}
// 传入数据生成 option
const optionsData = [
  {
    name: '在线',
    value: 94,
    itemStyle: {
      opacity: 0.7,
      color: '#dc3545',
    },
  },

  {
    name: '离线',
    value: 87,
    itemStyle: {
      opacity: 0.7,
      color: '#007bff',
    },
  },
  {
    name: '作业中',
    value: 110,
    itemStyle: {
      opacity: 0.7,
      color: '#F5B64C',
    },
  },
];

const series = getPie3D(optionsData, 0.8);

series.push({
  name: 'pie2d',
  type: 'pie',
  silent: true,
  label: {
    opacity: 1,
    fontSize: 22,
    lineHeight: 20,
  },
  labelLine: {
    length: 60,
    length2: 60,
  },
  startAngle: -30, //起始角度，支持范围[0, 360]。
  clockwise: false, //饼图的扇区是否是顺时针排布。上述这两项配置主要是为了对齐3d的样式
  radius: ['40%', '40%'],

  center: ['50%', '50%'],
  data: optionsData,
  itemStyle: {
    opacity: 0,
  },
});

const setOption = async (val: any) => {
  option.value = val;
};

const getData = () => {
  let optionVal = {
    legend: {
      tooltip: {
        show: true,
      },
      data: ['在线', '离线', '作业中'],
      bottom: '5%',
      textStyle: {
        color: '#fff',
        fontSize: 12,
      },
    },
    animation: true,
    tooltip: {
      formatter: (params: any) => {
        if (
          params.seriesName !== 'mouseoutSeries' &&
          params.seriesName !== 'pie2d'
        ) {
          return \`${
            params.seriesName
          }<br/><span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${
            params.color
          };"></span>${
            option.value.series[params.seriesIndex].pieData.value + '辆'
          }\`;
        }
      },
      textStyle: {
        fontSize: 15,
      },
    },
    title: {
      x: 'center',
      top: '20',
      textStyle: {
        color: '#fff',
        fontSize: 22,
      },
    },
    // backgroundColor: '#333',
    labelLine: {
      show: true,
      lineStyle: {
        color: '#7BC0CB',
      },
    },
    label: {
      show: true,
      position: 'outside',
      formatter: '{b} \n{c} {d}%',
    },
    xAxis3D: {
      min: -1,
      max: 1,
    },
    yAxis3D: {
      min: -1,
      max: 1,
    },
    zAxis3D: {
      min: -1,
      max: 1,
    },
    grid3D: {
      show: false,
      boxHeight: 0.5,
      //top: '30%',
      bottom: '50%',

      viewControl: {
        // 3d效果可以放大、旋转等，请自己去查看官方配置
        alpha: 25, // 角度
        beta: 60,
        rotateSensitivity: 0, // 设置为0无法旋转
        zoomSensitivity: 0, // 设置为0无法缩放
        panSensitivity: 0, // 设置为0无法平移
        autoRotate: false, // 自动旋转
        distance: 180, // 调整视角到主体的距离，类似调整zoom
      },
      // 后处理特效可以为画面添加高光、景深、环境光遮蔽（SSAO）、调色等效果。可以让整个画面更富有质感。
      postEffect: {
        // 配置这项会出现锯齿，请自己去查看官方配置有办法解决
        enable: false,
        bloom: {
          enable: true,
          bloomIntensity: 0.1,
        },
        SSAO: {
          enable: true,
          quality: 'medium',
          radius: 2,
        },
        // temporalSuperSampling: {
        //   enable: true,
        // },
      },
    },

    series: series,
  };

  setOption(optionVal);
};

onMounted(() => {
  getData();
});
const onMouseOver = (params: any) => {
  // 准备重新渲染扇形所需的参数
  let isSelected;
  let isHovered;
  let startRatio;
  let endRatio;
  let k;
  let i;

  // 如果触发 mouseover 的扇形当前已高亮，则不做操作
  if (hoveredIndex === params.seriesIndex) {
    return;

    // 否则进行高亮及必要的取消高亮操作
  } else {
    // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）
    if (hoveredIndex !== '') {
      // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。
      isSelected = option.value.series[hoveredIndex].pieStatus.selected;
      isHovered = false;
      startRatio = option.value.series[hoveredIndex].pieData.startRatio;
      endRatio = option.value.series[hoveredIndex].pieData.endRatio;
      k = option.value.series[hoveredIndex].pieStatus.k;
      i = 50;
      // 对当前点击的扇形，执行取消高亮操作（对 option 更新）
      option.value.series[hoveredIndex].parametricEquation =
        getParametricEquation(
          startRatio,
          endRatio,
          isSelected,
          isHovered,
          k,
          i
        );
      option.value.series[hoveredIndex].pieStatus.hovered = isHovered;

      // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空
      hoveredIndex = '';
    }

    // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）
    if (params.seriesName !== 'mouseoutSeries') {
      // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。
      isSelected = option.value.series[params.seriesIndex].pieStatus.selected;
      isHovered = true;
      startRatio = option.value.series[params.seriesIndex].pieData.startRatio;
      endRatio = option.value.series[params.seriesIndex].pieData.endRatio;
      k = option.value.series[params.seriesIndex].pieStatus.k;

      // 对当前点击的扇形，执行高亮操作（对 option 更新）
      option.value.series[params.seriesIndex].parametricEquation =
        getParametricEquation(
          startRatio,
          endRatio,
          isSelected,
          isHovered,
          k,
          // option.value.series[params.seriesIndex].pieData.value + 5
          80
        );
      option.value.series[params.seriesIndex].pieStatus.hovered = isHovered;

      // 记录上次高亮的扇形对应的系列号 seriesIndex
      hoveredIndex = params.seriesIndex;
    }
  }
};
const onGlobalOut = () => {
  let isSelected;
  let isHovered;
  let startRatio;
  let endRatio;
  let k;
  let i;
  if (hoveredIndex !== '') {
    // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。
    isSelected = option.value.series[hoveredIndex].pieStatus.selected;
    isHovered = false;
    k = option.value.series[hoveredIndex].pieStatus.k;
    startRatio = option.value.series[hoveredIndex].pieData.startRatio;
    endRatio = option.value.series[hoveredIndex].pieData.endRatio;
    // 对当前点击的扇形，执行取消高亮操作（对 option 更新）
    i = 50;
    option.value.series[hoveredIndex].parametricEquation =
      getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, i);
    option.value.series[hoveredIndex].pieStatus.hovered = isHovered;

    // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空
    hoveredIndex = '';
  }
};
</script>

<template>
  <v-chart
    class="chart"
    :option="option"
    @mouseover="onMouseOver"
    @globalout="onGlobalOut"
    v-if="JSON.stringify(option) != '{}'"
  />
</template>

<style>
/**
 * 默认尺寸为 600px×400px，如果想让图表响应尺寸变化，可以像下面这样
 * 把尺寸设为百分比值（同时请记得为容器设置尺寸）。
 */
/**/
/* .echarts { */
/*   width: 600px; */
/*   height: 400px; */
/* } */
</style>
endsnippet

snippet vue_empty_component "vue3 empty component"
<script setup lang="ts"></script>

<template>
  <div>
    <slot></slot>
  </div>
</template>

<style scoped lang="scss"></style>
endsnippet
