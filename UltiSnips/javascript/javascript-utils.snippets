# range函数
snippet	range "range (m, n)"
const range = (m, n) => Array(n - m + 1).fill().map((x, i) => m + i)
$0
endsnippet

# charMap数字映射大写字母
snippet charMap "0-25 => A-Z"
const charMap = range(0, 25).map(e => String.fromCharCode(e + 65))
endsnippet

# 深度取值函数
snippet deep_get "deepGet(obj, ['user', 'posts', 0, 'comments'])"
const deepGet = (o, p) => p.reduce((xs, x) => (xs && xs[x]) ? xs[x] : null, o)
endsnippet

# Obj克隆函数
snippet cloneobj "clone an object from source"
JSON.parse(JSON.stringify($0))
endsnippet

# 找到数组中符合elm的所有index
snippet get_array_indexs "find indexs of elm in array"
const getIndexs = (arr, elm) => arr.map((e, idx) => e === elm ? idx : '').filter(String)$0
endsnippet

snippet sub_array_from_another "subtract an array from another"
const ${0:subArray} = ${1:to}.reduce((p, c) => ($2.includes(c) ? p.splice(p.indexOf(c), 1) : null, p), ${2:from})$0
endsnippet

snippet array_to_count_map "convert array to count map"
const ${0:Map} = ${1:array}.reduce((p, c) => (p[c] = (p[c] === undefined ? 1 : p[c] + 1), p), {})$0
endsnippet

snippet flat_array "flatten nested array"
const flatArray = arr => [].concat(...arr.map(v => (Array.isArray(v) ? flatArray(v) : v)))$0
endsnippet

snippet plain_stringify "reformat JSON.stringify"
const plainStringify = (obj) => {
  return JSON.stringify(obj).replace(/\"([^(\")"]+)\":/g, "$1:")
}$0
endsnippet

snippet deep_clone "deepClone"
const deepClone = (obj, hash = new WeakMap()) => {
    // Do not try to clone primitives or functions
    if (Object(obj) !== obj || obj instanceof Function) return obj;
    if (hash.has(obj)) return hash.get(obj); // Cyclic reference
    try { // Try to run constructor (without arguments, as we don't know them)
      var result = new obj.constructor();
    } catch(e) { // Constructor failed, create object without running the constructor
      result = Object.create(Object.getPrototypeOf(obj));
    }
    // Optional: support for some standard constructors (extend as desired)
    if (obj instanceof Map) {
      Array.from(obj, ([key, val]) => result.set(
        deepClone(key, hash), 
        deepClone(val, hash))
      );
    } else if (obj instanceof Set) {
      Array.from(obj, (key) => result.add(deepClone(key, hash)));
    }  
    // Register in hash    
    hash.set(obj, result);
    // Clone and assign enumerable own properties recursively
    return Object.assign(result, ...Object.keys(obj).map(key => ({ [key]: deepClone(obj[key], hash)})));
}
endsnippet

snippet format_yyyy_mm_dd "format data"
// yyyy-MM-dd HH:MM:SS
convertDate(date) {
  const first = date.toISOString().split('T')[0]
  const second = date.toISOString().split('T')[1]
  return first + second.slice(0, 8)
}
endsnippet

snippet find_path_by_dfs "find path by dfs"
const findPathByDepthFirstSearch = (source, target, childKey, compareKey) => {
  const stack = JSON.parse(JSON.stringify(source));
  const result = [];
  const dfs = data => {
    result.push(data);
    if (data[compareKey] === target) {
      return result;
    }
    if (data[childKey] && data[childKey].length > 0) {
      return dfs(data[childKey][0]);
    }
    result.pop();
    if (result.length === 0) {
      return stack.length > 0 ? dfs(stack.shift()) : result;
    }
    const lastNode = result[result.length - 1];
    lastNode[childKey].shift();
    if (lastNode[childKey].length > 0) {
      return dfs(lastNode[childKey][0]);
    }
    return dfs(result.pop());
  };
  return dfs(stack.shift());
};
endsnippet
